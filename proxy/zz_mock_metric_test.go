// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/form3tech-oss/http-message-signing-proxy/proxy (interfaces: MetricPublisher)

// Package proxy is a generated GoMock package.
package proxy

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMetricPublisher is a mock of MetricPublisher interface.
type MockMetricPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockMetricPublisherMockRecorder
}

// MockMetricPublisherMockRecorder is the mock recorder for MockMetricPublisher.
type MockMetricPublisherMockRecorder struct {
	mock *MockMetricPublisher
}

// NewMockMetricPublisher creates a new mock instance.
func NewMockMetricPublisher(ctrl *gomock.Controller) *MockMetricPublisher {
	mock := &MockMetricPublisher{ctrl: ctrl}
	mock.recorder = &MockMetricPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricPublisher) EXPECT() *MockMetricPublisherMockRecorder {
	return m.recorder
}

// IncrementInternalErrorCount mocks base method.
func (m *MockMetricPublisher) IncrementInternalErrorCount(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncrementInternalErrorCount", arg0, arg1)
}

// IncrementInternalErrorCount indicates an expected call of IncrementInternalErrorCount.
func (mr *MockMetricPublisherMockRecorder) IncrementInternalErrorCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementInternalErrorCount", reflect.TypeOf((*MockMetricPublisher)(nil).IncrementInternalErrorCount), arg0, arg1)
}

// IncrementSignedRequestCount mocks base method.
func (m *MockMetricPublisher) IncrementSignedRequestCount(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncrementSignedRequestCount", arg0, arg1)
}

// IncrementSignedRequestCount indicates an expected call of IncrementSignedRequestCount.
func (mr *MockMetricPublisherMockRecorder) IncrementSignedRequestCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementSignedRequestCount", reflect.TypeOf((*MockMetricPublisher)(nil).IncrementSignedRequestCount), arg0, arg1)
}

// IncrementTotalRequestCount mocks base method.
func (m *MockMetricPublisher) IncrementTotalRequestCount(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncrementTotalRequestCount", arg0, arg1)
}

// IncrementTotalRequestCount indicates an expected call of IncrementTotalRequestCount.
func (mr *MockMetricPublisherMockRecorder) IncrementTotalRequestCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementTotalRequestCount", reflect.TypeOf((*MockMetricPublisher)(nil).IncrementTotalRequestCount), arg0, arg1)
}

// MeasureSigningDuration mocks base method.
func (m *MockMetricPublisher) MeasureSigningDuration(arg0, arg1 string, arg2 float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MeasureSigningDuration", arg0, arg1, arg2)
}

// MeasureSigningDuration indicates an expected call of MeasureSigningDuration.
func (mr *MockMetricPublisherMockRecorder) MeasureSigningDuration(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MeasureSigningDuration", reflect.TypeOf((*MockMetricPublisher)(nil).MeasureSigningDuration), arg0, arg1, arg2)
}

// MeasureTotalDuration mocks base method.
func (m *MockMetricPublisher) MeasureTotalDuration(arg0, arg1 string, arg2 float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MeasureTotalDuration", arg0, arg1, arg2)
}

// MeasureTotalDuration indicates an expected call of MeasureTotalDuration.
func (mr *MockMetricPublisherMockRecorder) MeasureTotalDuration(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MeasureTotalDuration", reflect.TypeOf((*MockMetricPublisher)(nil).MeasureTotalDuration), arg0, arg1, arg2)
}
