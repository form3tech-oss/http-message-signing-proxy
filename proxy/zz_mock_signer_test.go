// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/form3tech-oss/https-signing-proxy/signer (interfaces: RequestSigner)

// Package proxy is a generated GoMock package.
package proxy

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRequestSigner is a mock of RequestSigner interface.
type MockRequestSigner struct {
	ctrl     *gomock.Controller
	recorder *MockRequestSignerMockRecorder
}

// MockRequestSignerMockRecorder is the mock recorder for MockRequestSigner.
type MockRequestSignerMockRecorder struct {
	mock *MockRequestSigner
}

// NewMockRequestSigner creates a new mock instance.
func NewMockRequestSigner(ctrl *gomock.Controller) *MockRequestSigner {
	mock := &MockRequestSigner{ctrl: ctrl}
	mock.recorder = &MockRequestSignerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestSigner) EXPECT() *MockRequestSignerMockRecorder {
	return m.recorder
}

// SignRequest mocks base method.
func (m *MockRequestSigner) SignRequest(arg0 *http.Request) (*http.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignRequest", arg0)
	ret0, _ := ret[0].(*http.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignRequest indicates an expected call of SignRequest.
func (mr *MockRequestSignerMockRecorder) SignRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignRequest", reflect.TypeOf((*MockRequestSigner)(nil).SignRequest), arg0)
}
